// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tech_interview_api.Infrastructure.Persistence;

#nullable disable

namespace tech_interview_api.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231017182555_Seeding")]
    partial class Seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("tech_interview_api.Domain.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Author = "J.R.R. Tolkien",
                            Title = "The Fellowship of the Ring"
                        },
                        new
                        {
                            Id = 200,
                            Author = "J.R.R. Tolkien",
                            Title = "The Two Towers"
                        },
                        new
                        {
                            Id = 300,
                            Author = "J.R.R. Tolkien",
                            Title = "The Return of the King"
                        },
                        new
                        {
                            Id = 400,
                            Author = "J.R.R. Tolkien",
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 500,
                            Author = "J.R.R. Tolkien",
                            Title = "The Silmarillion"
                        });
                });

            modelBuilder.Entity("tech_interview_api.Domain.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MemberId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BookId1");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId1");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            BookId = 200,
                            LoanDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberId = 100
                        },
                        new
                        {
                            Id = 200,
                            BookId = 300,
                            LoanDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberId = 200
                        });
                });

            modelBuilder.Entity("tech_interview_api.Domain.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            EmailAddress = "yanick.rondeau@groupehsift.ca",
                            Name = "Yannick R",
                            PhoneNumber = "(819) 247-4214"
                        },
                        new
                        {
                            Id = 200,
                            EmailAddress = "john.doe@gmail.com",
                            Name = "John Doe",
                            PhoneNumber = "(819) 555-5555"
                        },
                        new
                        {
                            Id = 300,
                            EmailAddress = "Jane.D@outlook.com",
                            Name = "Jane Doe"
                        });
                });

            modelBuilder.Entity("tech_interview_api.Domain.Loan", b =>
                {
                    b.HasOne("tech_interview_api.Domain.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tech_interview_api.Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId1");

                    b.HasOne("tech_interview_api.Domain.Member", null)
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tech_interview_api.Domain.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId1");

                    b.Navigation("Book");

                    b.Navigation("Member");
                });
#pragma warning restore 612, 618
        }
    }
}
